= Abstract =
Our project is to restructure a Shepp-Logan Head Phantom Model using a method called Direct Fourier Reconstruction. It employs the central-slice theorem to build a 2D Fourier space (in polar form) from the 1D Fourier transformed projection slices of different angles, which is then placed on a two-dimensional Cartesian coordinate. This enhances the efficiency of the inverse 2D Fourier transform. 
After all, a reconstructed image will be produced, and it should looks like the original Shepp-Logan Head Phantom Model.
Since continuous Fourier transform is impractical in the digital world, we will use discrete Fourier transform to compute our data. And to boost up the running speed of our program, we will further use FFT to do the computation.
While we transfer the 1D Fourier transformed projection slices on to a two-dimensional plane, we need to do a suitable interpolation in order to place our sample on the Cartesian grid without much shifting and errors. After all these steps, we can now do the inverse 2D Fourier transform to obtain the reconstructed images. 
= Table of Contents =
...
= 1. Theory= 
Name of our reconstruction method: Direct Fourier Reconstruction 
As we know, the 1D Fourier transform of a Radon projection slice is equivalent to the central slice of 2D Fourier transformed function. If we project certain amount of x-ray to a 2D object along different angles, we will get different Radon functions at these angles. Once we have this data, we should able to generate the original 2D image.
== 1.1. Central Slice Theorem (CST) ==
 * brief introduction 
 * illustrations 
=== 1.1.1. CTFT -> DTFT ===
 * how to apply CST to sampled (discrete time) data instead of continuous time data. 
 * Explain some drawbacks with the new method (alising....) 
=== 1.1.2. DTFT -> DFT ===
 * Where is the DC? How to shift the DC before doing DFT? 
DTFT is a discrete time sampling version of Fourier Transform whereas DFT is a discrete frequency sampling version of DTFT. Hence DFT is a discrete time and discrete frequency sampling version of Fourier Transform. 
The reason to have DTFT is that we need to sample from a continual and infinite signal and the reason for having DFT is that it is impractical to calculate every frequency.
Using DTFT will occupy lots of computer space, therefore, it will not be used. And it is not necessary to use DTFT, in our case, DFT will do.
=== 1.1.3. DFT -> FFT (Optional) ===
An FFT (Fast Fourier Transform) is a faster version of the DFT that can be applied when the number of samples in the signal is a power of two. An FFT computation takes approximately 
N times log2(N) operations, whereas a DFT takes approximately N2 operations, so the FFT is significantly faster.
The data that we want to do FFT is all the columns in the sinogram (Radon transformed), to make the number of samples (number of rows) be a power of two, we need to zeropad the data, which is making extra rows to the data as needed. This will not distort the original data, as it just enlarges the original data with zero value elements.
In addition with oversampling, we can further minimize aliasing artifacts appearing in the final reconstructed images. 
== 1.2. Interpolation ==
Since FFT is more efficient in rectangular coordinate system, thus, we better transfer the 1D Fourier transformed projection slices to such 2D coordinate system. And since the transformed projection slices are in polar coordinate system, we need to convert it in to Cartesian coordinate, using pol2cart. Next, we will do interpolation to place the data on the suitable position of the 2D Cartesian grid. And to avoid extrapolation, everything outside the defined space is set to be zero. However, converting coordinate system will introduce some errors, which will show as artifact at the final reconstructed image.

http://centralslice.googlecode.com/svn/wiki/interp_nearest.png

Figure : Reconstructed image using nearest point method (Shape=Modified Shepp-Logan, no_of_sensors=255, no_of_slices=180, scan_angle=180deg,  SNRdB=Inf, interp_method=nearest, anti-aliasing=off)

http://centralslice.googlecode.com/svn/wiki/interp_linear.png

Figure : Reconstructed image using linear interpolation method (Shape=Modified Shepp-Logan, no_of_sensors=255, no_of_slices=180, scan_angle=180deg,  SNRdB=Inf, interp_method=linear, anti-aliasing=off)

 
Figure : Reconstructed image using spline method
 
Figure : Reconstructed image using cubic method


While comparing different methods of interpolations, it is clear that using nearest point method will give lots of artifacts than the others. Although none of the above four methods can give a completely artifact-free reconstructed image, linear, spline and cubic methods are not too bad, the quality of the reconstructed images are quite high in fact. 
With regarding the computation time, using nearest point and linear methods give relatively shorter period to compute the images than using spline and cubic methods. Hence, among the four methods mentioned, using linear method will produce a high quality images as well as using less computation time.
However, while considering the contrast of the image, the linear one gives the less contrast, whereas, the cubic method ranks the second last. Unlikely, the spline method and nearest point methods provide with the greatest contrast.
= 2. Experiments =
== 2.1. Basic ==
=== 2.1.1. Number of sensors ===
 * Test and observe the effect of linear density of sensors on the quality of image. 
 * Show revelent figures 
 * Quantify the meaning of "quality", and plot the graph of "quality" against "no of sensors" 
=== 2.1.2. Number of projection slices ===
 * Test and observe the effect of number of projection slices on the quality of image. 
 * Show revelent figures 
 * Quantify the meaning of "quality", and plot the graph of "quality" against "no of projection slices" 
=== 2.1.3. Scan angle (<180, >180) (Optional) ===
 * Test and observe the effect of scan angle on the quality of image. 
 * Show revelent figures 
 * Quantify the meaning of "quality", and plot the graph of "quality" against "no of sensors" 
=== 2.1.4. Historical results (Optional) ===
 * Search name of 1st generation CT machines / manufacturers that use parallel beams 
 * Copy the specifications (no of sensors, number of slices, ...) 
 * run simulations 
 * Convince readers that our algorithm is compatible with reality. 
== 2.2. Advanced ==
=== 2.2.1. Noise ===
 * Source of noise (background, scattereing, fog level, quantum jump in CCD????) 
 * Test and observe the effect of scan angle on the quality of image. 
 * Show revelent figures 
 * Quantify the meaning of "quality", and plot the graph of "quality" against "no of sensors" 
 * what could be done to reduce the impact? 
===2.2.2. Sensor Damage===

http://centralslice.googlecode.com/svn/wiki/Radon_Projection_top.png

http://centralslice.googlecode.com/svn/wiki/sensor_damage_top.png

Figure : ??? (Shape=Modified Shepp-Logan, no_of_sensors=255, no_of_slices=180, scan_angle=180deg, sensor_damage=1 in 255, SNRdB=Inf, interp_method=linear, anti-aliasing=4)

http://centralslice.googlecode.com/svn/wiki/Radon_Projection_bottom.png

http://centralslice.googlecode.com/svn/wiki/sensor_damage_bottom.png

Figure : ??? (Shape=Modified Shepp-Logan, no_of_sensors=255, no_of_slices=180, scan_angle=180deg, sensor_damage=1 in 255, SNRdB=Inf, interp_method=linear, anti-aliasing=4)

http://centralslice.googlecode.com/svn/wiki/Radon_Projection_centre.png

http://centralslice.googlecode.com/svn/wiki/sensor_damage_centre.png

Figure : ??? (Shape=Modified Shepp-Logan, no_of_sensors=255, no_of_slices=180, scan_angle=180deg, sensor_damage=1 in 255, SNRdB=Inf, interp_method=linear, anti-aliasing=4)

 * Nullify some sensors and observe the impact to image quality 
 * Show revelent figures 
 * quantify the meaning of "sensor damage" and "quality" and plot the graph of "quality" against "sensor damage" 
 * what could be done to reduce the impact? 
===2.2.3. Speed (Optional)===
 * Compare the speed with different methods. 
 * Ask for codes from other groups to compare the computation time 
 * Explain why Direct Fourier Reconstruction is the fastest of all methods. 
= 3. Conclusion =
 * what we have done 
 * what makes direct fourier reconstruction possible? 
 * Why filtered backprojection is preferred in clinics application? 
 * what could be done to make this method better? 
 * (...) 
= Appendix =
== A. List of figures ==
== B. Matlab code Documentation ==
= References =
(Paste your reference here.) 
1. Forrest Sheng Bao, 2008, FT, STFT, DTFT, DFT and FFT, revisited, Forrest Sheng Bao, http://narnia.cs.ttu.edu/drupal/node/46

Format: author, year, title, publisher(website name), link (APA style or IEEE style favoured) 